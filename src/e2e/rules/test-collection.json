{
	"info": {
		"_postman_id": "02e4391b-0860-4ce9-9a57-85a1278975cf",
		"name": "ML YARA E2E",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20587040"
	},
	"item": [
		{
			"name": "Rules",
			"item": [
				{
					"name": "Create First Rule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create successfully\", () => {\r",
									"    pm.response.to.be.success;\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Dummy\",\r\n    \"rule\":\"rule Dummy\\r\\n{\\r\\n condition:\\r\\n true\\r\\n}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/rules",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"rules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create EstoNoEsCocaPapiRule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create successfully\", () => {\r",
									"    pm.response.to.be.success;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"esto no es coca papi rule\",\r\n    \"rule\":\"rule EstoNoEsCocaPapiRule\\r\\n{\\r\\n strings:\\r\\n $my_text_string = \\\"esto no es coca papi\\\"\\r\\n condition:\\r\\n $my_text_string\\r\\n}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/rules",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"rules"
							]
						}
					},
					"response": []
				},
				{
					"name": "Analyze",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody)\r",
									"\r",
									"pm.test(\"Rule 1 should not match\", () => {\r",
									"  const rule1 = jsonData.results.find(r => r.rule_id == 1);\r",
									"  pm.expect(rule1.matched).to.be.false;\r",
									"})\r",
									"\r",
									"pm.test(\"Rule 2 should match\", () => {\r",
									"  const rule1 = jsonData.results.find(r => r.rule_id == 2);\r",
									"  pm.expect(rule1.matched).to.be.true;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\":\"esto no es coca papi\",\r\n    \"rules\": \r\n\t    [\r\n\t\t    {\"rule_id\": 1},\r\n            {\"rule_id\": 2}\r\n\t    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:{{port}}/rules/analyze",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"rules",
								"analyze"
							]
						}
					},
					"response": []
				},
				{
					"name": "List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody)\r",
									"\r",
									"pm.test(\"Shoul list 2 rules\", () => {\r",
									"    pm.expect(jsonData.length).to.eq(2);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{port}}/rules",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{port}}",
							"path": [
								"rules"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}